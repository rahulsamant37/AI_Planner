apiVersion: v1
kind: Namespace
metadata:
  name: ai-planner
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: ai-planner
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  REDIS_HOST: "redis-service"
  ELASTICSEARCH_HOST: "elasticsearch-service"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: ai-planner
type: Opaque
data:
  GROQ_API_KEY: ""  # Base64 encoded API key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planner-service
  namespace: ai-planner
  labels:
    app: planner-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: planner-service
  template:
    metadata:
      labels:
        app: planner-service
    spec:
      containers:
      - name: planner-service
        image: ai-planner/planner-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_HOST
        - name: GROQ_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: GROQ_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: planner-service
  namespace: ai-planner
spec:
  selector:
    app: planner-service
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-service
  namespace: ai-planner
  labels:
    app: frontend-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-service
  template:
    metadata:
      labels:
        app: frontend-service
    spec:
      containers:
      - name: frontend-service
        image: ai-planner/frontend-service:latest
        ports:
        - containerPort: 8501
        env:
        - name: PLANNER_SERVICE_URL
          value: "http://planner-service:8000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ai-planner
spec:
  selector:
    app: frontend-service
  ports:
  - protocol: TCP
    port: 8501
    targetPort: 8501
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-planner-ingress
  namespace: ai-planner
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  rules:
  - host: ai-planner.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 8501
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: planner-service
            port:
              number: 8000
